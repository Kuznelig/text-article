/* Задаем базовые стили: к базовым стилям относится определение параметров шрифта и цвета фона элементов. */
body {
    font-family: "Source Sans Pro", sans-serif;
    font-size: 20px;
    line-height: 30px;
    color: #000218;
    margin: 0;
}
.post h1 {
    font-size: 42px;
    line-height: 52px;
    margin: 0;
    margin-bottom: 20px;
}
.post-lead {
    font-size: 24px;
    line-height: 34px;
    margin: 0;
    margin-bottom: 25px;
}
.post-description {
    font-size: 24px;
    line-height: 34px;
}
.post-content h2 {
    font-size: 32px;
    line-height: 40px;
}
.post-content h3 {
    font-size: 24px;
    line-height: 30px;
}
.tag a{
    font-size: 16px;
    line-height: 20px;
    color: #000218;
    text-decoration: none;
}
.post-meta time {
    font-size: 16px;
    line-height: 20px;
}

/* построим сетку страницы: Перечислим стили, которые относятся к сетке страницы:

сброс внешних отступов у <body>;
установка горизонтальных размеров и центровка основного содержимого страницы;
установка внутренних отступов для раздела post;
ограничение ширины контентной области.
В макете контентные блоки ограничены по ширине, чтобы улучшить читаемость многострочного текста. Обычно на практике длину строки ограничивают 60-80 знаками. Мы задаём отдельно ширину контейнера post для центровки всего содержимого страницы и отдельно ограничиваем ширину текстовых элементов. */
.post {
    width: 970px;
    margin: 0 auto;

    padding-right: 155px;
    padding-left: 155px;

    padding-top: 120px;
    padding-bottom: 95px;
}
.post-lead {
    width: 700px;
}
.post-description {
    width: 700px;
}
.post-content {
    width: 700px;
}
/* Вертикальные отступы заголовка и лида
После установки сеточных стилей нужно довести вёрстку до соответствия макету.

Можно выделить в макете четыре крупных блока, которые мы будем стилизовать на следующих шагах:

основной заголовок и лид;
    Заголовок и лид относятся к интерфейсным элементам: мы полностью контролируем их разметку, из макета видно, что их состав и расположение не будет меняться.
    Особенности установки отступов у интерфейсных элементов: всегда в одну сторону, со сбросом значений по умолчанию.
описание статьи: иллюстрация и подпись к ней;
основной контент;
подвал статьи. */
.article-img {
    display: block;
    margin-bottom: 40px;
}
.post-description {
    margin: 0;
    margin-bottom: 55px;
}
/* Стилизуем текстовый поток, заголовки
До сих пор в предыдущих заданиях мы верстали все текстовые элементы как интерфейсные: контролировали их последовательность и устанавливали отступы всегда с одной стороны. При этом у каждого интерфейсного текстового элемента был назначен свой класс. Текстовые элементы в потоке верстают по-другому.

Содержание статьи состоит из текстовых элементов. В отличие от интерфейсных элементов, мы не можем контролировать порядок блоков текстового содержания. Количество и порядок элементов в содержании статьи может измениться при наполнении сайта. Поэтому верстать содержание мы будем в текстовом потоке.

На этапе разметки мы создали контейнер для содержания .post-content, а стили текстовым элементам в потоке назначаем «за каскадом». Для каждого типового элемента содержания задаём стили вложенным селектором по тегу. Это позволит при наполнении блока текстовым контентом не задавать классы элементам в потоке.

Другое отличие стилизации текстового потока — вертикальные отступы элементам задают с обеих сторон: и сверху, и снизу. При оформлении текстового потока обычно задают стили для текстовых элементов, которые могут встретиться в будущих текстах: заголовков, абзацев, списков и так далее. Мы не будем задавать стили для всех возможных тегов, а ограничимся только теми, что видим на макете. И начнём с заголовков.

Для заголовков обычно устанавливают асимметричные поля: верхнее поле больше нижнего. Этот приём используется для подчёркивания вертикального ритма: расстояние между разделами будет больше, чем между элементами.

Теперь давайте на макете измерим и зададим в стилях верхние и нижние отступы для элементов h2 и h3. */

.post-content h2 {
    margin-top: 55px;
    margin-bottom: 25px;
}
.post-content h3 {
    margin-top: 40px;
    margin-bottom: 20px;
}
/* Стилизуем текстовый поток, абзацы
После установки отступов заголовкам приступаем к вертикальным отступам для абзацев. Абзацы следуют в потоке друг за другом, они могут располагаться перед заголовками и после. Поэтому абзацам обычно назначают симметричные верхние и нижние отступы.

Браузеры по умолчанию добавляют абзацам (и другим блочным элементам, например, цитатам и спискам) верхнее и нижнее поля по 1em. Подразумевается, что вертикальные поля всегда должны быть переопределены разработчиком.

Ключевая особенность стилизации текстового потока — использование эффекта «схлопывания» внешних отступов.

При вёрстке интерфейсных элементов мы боролись с эффектом схлопывания, обнуляя отступы по умолчанию и устанавливая их всегда с одной стороны. Таким образом мы избегали совмещения отступов у соседних элементов. При вёрстке текста схлопывание отступов полезно, будем его использовать, а не бороться с ним.

Зададим для каждого элемента и верхний, и нижний отступы, тогда при любой последовательности между ними будет установлен наибольший из отступов (наложение или совмещение). Такого поведения при установке отступов как для интерфейсных элементов (всегда с одной стороны) нам бы добиться не удалось.

Стратегия назначения отступов с учётом схлопывания: измеряем в макете все возможные отступы и назначаем минимальное значение. */
.post-content p {
    margin-top: 10px;
    margin-bottom: 10px;
}
/* В макете можно найти минимальное значение расстояния между абзацами в 10px.
Установим это значение и для верхнего, и для нижнего отступа.

Мы задали минимальные отступы для абзаца. Остальные измеренные значения больше 10px, и отступы будут определяться соседними элементами (заголовками) благодаря «схлопыванию» отступов в потоке.

Схема показывает, как работает «схлопывание». При каждом сочетании внешних отступов браузер формирует один внешний отступ между элементами их наложением. Такая особенность блочной модели позволяет сохранить вертикальный ритм элементов в текстовом потоке. */

/* Стилизуем текстовый поток, списки
Продолжаем работу с текстовым содержимым. Мы задали вертикальные отступы абзацам и заголовкам, остался ещё один элемент: список. Этот элемент сложный, ему требуются и вертикальные, и горизонтальный отступы. Вертикальные отступы нужно задать самому списку ul и его отдельным элементам li.

Учитывайте особенности «схлопывания» отступов в потоке при назначении стилей. Для списка установите симметричные (одинаковые) отступы сверху и снизу, как у абзаца. Выбирайте меньшее из измеренных в макете значений.

Для элементов списка li вертикальные отступы можно установить разными способами: отступ только сверху, отступ только снизу, отступ с обеих сторон. Все варианты равнозначны, потому что элементы li всегда следуют друг за другом. Отступы первого и последнего элементов «схлопываются» с вертикальными отступами самого списка ul.

Получите в макете величины отступов для списка и его элементов. Прежде чем устанавливать отступы из макета, обнулите поля и отступы списка по умолчанию. */
.post-content ul {
    margin: 0;
    padding: 0;
   
    margin-top: 15px;
    margin-bottom: 15px;
    padding-left: 20px;

}
.post-content li {
    margin-top: 15px;
    margin-bottom: 15px;
}
/* Подведём итог системы отступов в текстовом потоке:

для заголовочных элементов отступы сверху и снизу делают разными. Обычно разница составляет 2-3 раза, и за счёт этого получается крупный вертикальный ритм.
остальным текстовым элементам (абзацам и спискам) делают одинаковые отступы сверху и снизу.
Фактически вертикальный ритм выстраивается на отступах заголовков. Конечно, решение зависит от макета, но обычно дизайнеры именно так выстраивают ритм в тексте. */


/* Отступ между контентом и метаданными
Продолжаем выравнивать вертикальные отступы по макету. В прошлом задании мы стилизовали текстовые элементы, которые объединены в блок .post-content. Когда у блока нет рамки или внутренних полей, происходит «выпадение» внешнего отступа элемента-потомка из контейнера, и отступ между блоком контента и подвалом статьи определяется внешними отступами дочерних элементов. В нашем случае это последний абзац в тексте статьи и список тегов в подвале. */
/* «Выпадение» отступа — следствие механизма «схлопывания» в потоке. В данном случае также происходит наложение (совмещение) внешних отступов элементов, но уже не соседних, а потомка .post-content p и родителя .post-content. Браузер производит наложение «выпавших» из контейнеров отступов элементов и благодаря «схлопыванию» применяет больший: верхний отступ элемента ul.tags.

Для построения вертикальной сетки между крупными блоками контента и подвала стандартное поведение блочной модели не подходит. Мы должны зафиксировать вертикальный отступ между крупными блоками страницы, и для этого зададим отступ контейнеру, который будет заведомо больше отступов дочерних элементов: */
/* Получите из макета расстояние между подвалом статьи и блоком контента. Установите полученное значение верхним отступом подвала .post-footer. */
.post-footer {
    margin-top: 40px;
}
.post-footer {
    border-top: 1px solid #000218;
    border-bottom: 1px solid #000218;
    padding-top: 30px;
    padding-bottom: 30px;
    display: flex;
    justify-content: space-between;
}
.tags {
    padding: 0;
    margin: 0;
    list-style: none;
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 25px;
}
.tag a {
    display: block;
    border: 1px solid #5974FF;
    padding: 5px 10px;
}
/* Ширина левой колонки блока метаданных
Мы закончили работу с сеткой списка тегов, задали взаимное расположение элементов, их размеры и добавили декоративную рамку тегам. Разберём ещё один нюанс геометрии компонента: опишем поведение колонки подвала при наполнении списка тегами.

В одном из прошлых заданий мы уделили внимание возможному переполнению списка тегов, не описанному в макете, — разрешили перенос элементов на новую строку. Мы упомянули тогда «краевой» случай: ширина списка тегов точно равна ширине колонки. В такой ситуации переноса на новую строку не происходит, теги вместе с расстояниями между ними точно помещаются в доступную ширину. Но пропадает расстояние между крайним тегом и ссылкой «поделиться». Другими словами, обе колонки подвала .post-footer занимают всю ширину флекс-контейнера.

У этой задачи есть несколько решений и несколько вариантов, какому элементу ограничивать ширину. Мы разберём один из способов ограничить ширину колонки. Задайте ограничение максимальной ширины элемента .post-meta установкой «разумного» значения max-width. Максимальная ширина колонки в макете не задана, но мы можем предположить её такой, чтобы сохранить отступ между списком тегов и ссылкой .post-meta. Размер должен быть больше текущей ширины блока в макете. */
.post-meta {
    max-width: 920px;
}
.tag a:hover {
    opacity: 70%;
}
.tag a:active {
    opacity: 50%;
}
.post-share {
    margin-top: 15px;
}
.post-share:hover {
    opacity: 0.7;
}
.post-share:active {
    opacity: 0.5;
}